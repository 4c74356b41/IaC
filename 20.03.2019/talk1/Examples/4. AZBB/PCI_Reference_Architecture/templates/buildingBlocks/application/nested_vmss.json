{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "networkReference": {
            "type": "array"
        },
        "environmentReference": {
            "type": "secureObject"
        },
        "bossObject": {
            "type": "secureObject"
        }
    },
    "variables": {
        "natStartPort": 50000,
        "natEndPort": 50119,
        "natBackendPortUbuntu": 22,
        "natBackendPortWindows": 3389,
        "omsName": "[concat(parameters('environmentReference').deployment.prefix, '-', parameters('environmentReference').deployment.env, '-oms')]",
        "Ubuntu": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04.0-LTS",
            "version": "latest"
        },
        "Windows": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter-smalldisk",
            "version": "latest"
        }
    },
    "resources": [
        {
            "condition": "[equals(parameters('bossObject').balancer, 'ilb')]",
            "apiVersion": "2017-04-01",
            "name": "[concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb')]",
            "location": "[parameters('environmentReference').deployment.location]",
            "type": "Microsoft.Network/loadBalancers",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "subnet": {
                                "id": "[concat(resourceId(concat(parameters('environmentReference').deployment.prefix, '-', parameters('environmentReference').deployment.env, '-networking'), 'Microsoft.Network/virtualNetworks', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').vnet)), '/subnets/', parameters('bossObject').subnet)]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "[concat(parameters('bossObject').name, '-bePoolName')]"
                    }
                ],
                "inboundNatPools": [
                    {
                        "name": "[concat(parameters('bossObject').name, '-natPoolName')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb')), '/frontendIPConfigurations/loadBalancerFrontEnd')]"
                            },
                            "protocol": "tcp",
                            "frontendPortRangeStart": "[variables('natStartPort')]",
                            "frontendPortRangeEnd": "[variables('natEndPort')]",
                            "backendPort": "[variables(concat('natBackendPort', parameters('bossObject').os))]"
                        }
                    }
                ],
                "copy": [
                    {
                        "name": "probes",
                        "count": "[length(parameters('bossObject').ports)]",
                        "input": {
                            "name": "[concat('probe-', parameters('bossObject').ports[copyIndex('probes')])]",
                            "properties": {
                                "protocol": "tcp",
                                "port": "[parameters('bossObject').ports[copyIndex('probes')]]",
                                "intervalInSeconds": 15,
                                "numberOfProbes": 5
                            }
                        }
                    },
                    {
                        "name": "loadBalancingRules",
                        "count": "[length(parameters('bossObject').ports)]",
                        "input": {
                            "name": "[concat('lbr-', parameters('bossObject').ports[copyIndex('loadBalancingRules')])]",
                            "properties": {
                                "backendAddressPool": {
                                    "id": "[concat(resourceGroup().id, '/providers/Microsoft.Network/loadBalancers/', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb'), concat('/backendAddressPools/', parameters('bossObject').name, '-bePoolName'))]"
                                },
                                "backendPort": 80,
                                "enableFloatingIP": false,
                                "frontendIPConfiguration": {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb')), '/frontendIPConfigurations/loadBalancerFrontEnd')]"
                                },
                                "frontendPort": 80,
                                "probe": {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb')), concat('/probes/', 'probe-', parameters('bossObject').ports[copyIndex('loadBalancingRules')]))]"
                                },
                                "protocol": "Tcp",
                                "loadDistribution": "SourceIP"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2017-03-30",
            "name": "[concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-vmss')]",
            "location": "[parameters('environmentReference').deployment.location]",
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "dependsOn": [
                "[concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb')]"
            ],
            "sku": {
                "name": "[parameters('bossObject').size]",
                "tier": "Standard",
                "capacity": "[parameters('bossObject').count]"
            },
            "properties": {
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "FromImage"
                        },
                        "imageReference": "[variables(parameters('bossObject').os)]"
                    },
                    "osProfile": {
                        "computerNamePrefix": "[parameters('bossObject').name]",
                        "adminUsername": "[parameters('environmentReference').domain.serviceAccess]",
                        "adminPassword": "[parameters('bossObject').password]"
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
                                "name": "vmssnicname",
                                "properties": {
                                    "primary": true,
                                    "ipConfigurations": [
                                        {
                                            "name": "[concat(parameters('bossObject').name, '-ipconfiguration')]",
                                            "properties": {
                                                "subnet": {
                                                    "id": "[concat(resourceId(concat(parameters('environmentReference').deployment.prefix, '-', parameters('environmentReference').deployment.env, '-networking'), 'Microsoft.Network/virtualNetworks', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').vnet)), '/subnets/', parameters('bossObject').subnet)]"
                                                },
                                                "loadBalancerBackendAddressPools": [
                                                    {
                                                        "id": "[concat(resourceGroup().id, '/providers/Microsoft.Network/loadBalancers/', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb'), concat('/backendAddressPools/', parameters('bossObject').name, '-bePoolName'))]"
                                                    }
                                                ],
                                                "loadBalancerInboundNatPools": [
                                                    {
                                                        "id": "[concat(resourceGroup().id, '/providers/Microsoft.Network/loadBalancers/', concat(parameters('environmentReference').deployment.env, '-', parameters('bossObject').name, '-ilb'), concat('/inboundNatPools/', parameters('bossObject').name, '-natPoolName'))]"
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    },
                    "diagnosticsProfile": {
                        "bootDiagnostics": {
                            "enabled": true,
                            "storageUri": "[reference(resourceId(concat(parameters('environmentReference').deployment.prefix, '-', parameters('environmentReference').deployment.env, '-operations'), 'Microsoft.Storage/storageAccounts', concat(parameters('environmentReference').deployment.prefix, parameters('environmentReference').deployment.env, 'diagstor')), '2015-06-15').primaryEndpoints['blob']]"
                        }
                    },
                    "extensionProfile": {
                        "extensions": "[concat(parameters('bossObject').customExtensions, reference(concat('iterator-', parameters('bossObject').name, '-', length(parameters('bossObject').extensions))).outputs.collection.value)]"
                    }
                }
            }
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[concat('iterator-', parameters('bossObject').name, '-0')]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('environmentReference').deployment.buildingBlocksEndpoint, 'application/nested_vmss_extensions.json')]"
                },
                "parameters": {
                    "source": {
                        "value": "empty"
                    },
                    "environmentReference": {
                        "value": "[parameters('environmentReference')]"
                    },
                    "oms": {
                        "value": {
                            "Id": "bogus",
                            "Key": "bogus"
                        }
                    }
                }
            }
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[concat('iterator-', parameters('bossObject').name, '-', copyIndex(1))]",
            "type": "Microsoft.Resources/deployments",
            "copy": {
                "name": "iterator",
                "count": "[length(parameters('bossObject').extensions)]",
                "mode": "Serial"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('environmentReference').deployment.buildingBlocksEndpoint, 'application/nested_vmss_extensions.json')]"
                },
                "parameters": {
                    "source": {
                        "value": "[parameters('bossObject').extensions[copyIndex()]]"
                    },
                    "state": {
                        "value": "[reference(concat('iterator-', parameters('bossObject').name, '-', copyIndex())).outputs.collection.value]"
                    },
                    "oms": {
                        "value": {
                            "Id": "[if(equals(parameters('bossObject').extensions[copyIndex()], 'OMS'), reference(resourceId(concat(parameters('environmentReference').deployment.prefix, '-', parameters('environmentReference').deployment.env, '-operations'),'microsoft.operationalinsights/workspaces',variables('omsName')), '2015-03-20').customerId, 'bogus')]",
                            "Key": "[if(equals(parameters('bossObject').extensions[copyIndex()], 'OMS'), listKeys(resourceId(concat(parameters('environmentReference').deployment.prefix, '-', parameters('environmentReference').deployment.env, '-operations'),'microsoft.operationalinsights/workspaces',variables('omsName')), '2015-03-20').primarySharedKey, 'bogus')]"
                        }
                    },
                    "environmentReference": {
                        "value": "[parameters('environmentReference')]"
                    }
                }
            }
        }
    ]
}